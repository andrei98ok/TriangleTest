// Generated by Selenium IDE
import org.junit.Test;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

//@TestInstance(Lifecycle.PER_CLASS)
public class TriangleTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
	  System.setProperty("webdriver.chromedriver","C:\\Users\\besti\\eclipse-workspace\\TriangleTest\\chromedriver.exe"); //Путь до ChromeDriver
   
	  ChromeOptions opt = new ChromeOptions();
	  opt.addArguments("--headless");
	  
	  driver = new ChromeDriver(opt);
 
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  
  @Test
  public void СSS1() {
    // Test name: Заполнено только одно поле для данных (CSS)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 971x753 | 
    driver.manage().window().setSize(new Dimension(971, 753));
    // 3 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 4 | type | name=vx | 0
    driver.findElement(By.name("vx")).clear();
    // driver.findElement(By.name("vx")).sendKeys("0");
    // 5 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
    // 6 | type | name=vc | 0
    driver.findElement(By.name("vc")).clear();
    // driver.findElement(By.name("vc")).sendKeys("0");
    // 7 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 8 | type | name=vy | 5
    driver.findElement(By.name("vy")).clear();
    driver.findElement(By.name("vy")).sendKeys("5");
    // 9 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 10 | assertText | css=#content > p:nth-child(4) > font | Please provide 3 positive values, including at least one side.
    assertEquals(driver.findElement(By.cssSelector("#content > p:nth-child(4) > font")).getText(), "Please provide 3 positive values, including at least one side.");
  } 
   @Test
  public void СSS2() {
    // Test name: Равнобедренный треугольник (CSS)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 971x753 | 
    driver.manage().window().setSize(new Dimension(971, 753));
    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
    // 4 | type | name=vc | 0
    driver.findElement(By.name("vc")).clear();
    // 5 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 6 | type | name=vx | 3
    driver.findElement(By.name("vx")).clear();
    driver.findElement(By.name("vx")).sendKeys("3");
    // 7 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 8 | type | name=vy | 3
    driver.findElement(By.name("vy")).clear();
    driver.findElement(By.name("vy")).sendKeys("3");
    // 9 | click | name=vz | 
    driver.findElement(By.name("vz")).click();
    // 10 | type | name=vz | 1
    driver.findElement(By.name("vz")).sendKeys("1");
    // 11 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 12 | assertText | css=.bigtext:nth-child(2) | Side a = 3\nSide b = 3\nSide c = 1
    assertEquals(driver.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 3\nSide b = 3\nSide c = 1");
  } 
 
 @Test
  public void CSS3() {
    // Test name: Равносторонний треугольник (CSS)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | click | name=vc | 
    driver.findElement(By.name("vc")).click();
    // 3 | type | name=vc | 0
    driver.findElement(By.name("vc")).clear();
    driver.findElement(By.name("vc")).sendKeys("0");
    // 4 | click | name=vx | 
    driver.findElement(By.name("vx")).click();
    // 5 | click | name=vy | 
    driver.findElement(By.name("vy")).click();
    // 6 | click | name=vz | 
    driver.findElement(By.name("vz")).click();
    // 7 | type | name=vz | 1
    driver.findElement(By.name("vz")).sendKeys("1");
    // 8 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 9 | assertText | css=.bigtext:nth-child(2) | Side a = 1\nSide b = 1\nSide c = 1
    assertEquals(driver.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 1\nSide b = 1\nSide c = 1");
  } 
 
  @Test
  public void CSS4() {
    // Test name: Заполнено 4 поля для данных (CSS)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 971x753 | 
    driver.manage().window().setSize(new Dimension(971, 753));
    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
    // 4 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 5 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 6 | click | name=vz | 
    driver.findElement(By.name("vz")).click();
    // 7 | type | name=vz | 1
    driver.findElement(By.name("vz")).sendKeys("1");
    // 8 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 9 | assertText | css=#content > p:nth-child(4) > font | Please provide three positive values only. You have 4 now.
    assertEquals(driver.findElement(By.cssSelector("#content > p:nth-child(4) > font")).getText(), "Please provide three positive values only. You have 4 now.");
  } 
  
  @Test
  public void XPath1() {
    // Test name: Заполнено 4 поля для данных (XPath)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 971x753 | 
    driver.manage().window().setSize(new Dimension(971, 753));
    // 3 | click | xpath=//*[@id="content"]/div[2]/form/table/tbody/tr[1]/td/input | 
    driver.findElement(By.xpath("//*[@id=\"content\"]/div[2]/form/table/tbody/tr[1]/td/input")).click();
    // 4 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
    driver.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
    // 5 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
    driver.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
    // 6 | click | name=vz | 
    driver.findElement(By.name("vz")).click();
    // 7 | type | name=vz | 1
    driver.findElement(By.name("vz")).sendKeys("1");
    // 8 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 9 | assertText | xpath=//*[@id="content"]/p[2]/font | Please provide three positive values only. You have 4 now.
    assertEquals(driver.findElement(By.xpath("//*[@id=\"content\"]/p[2]/font")).getText(), "Please provide three positive values only. You have 4 now.");
  } 

  @Test
  public void CSS5() {
    // Test name: Прямоугольный треугольник (CSS)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 974x1031 | 
    driver.manage().window().setSize(new Dimension(974, 1031));
    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
    // 4 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 5 | type | name=vy | 0
    driver.findElement(By.name("vy")).clear();
    driver.findElement(By.name("vy")).sendKeys("0");
    // 6 | click | name=vb | 
    driver.findElement(By.name("vb")).click();
    // 7 | type | name=vb | 90
    driver.findElement(By.name("vb")).sendKeys("90");
    // 8 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 9 | assertText | css=.bigtext:nth-child(2) | Side a = 0.5\nSide b = 1\nSide c = 0.86603 = √3/2
    assertEquals(driver.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 0.5\nSide b = 1\nSide c = 0.86603 = √3/2");
  } 

  @Test
  public void xPath2() {
    // Test name: Равнобедренный треугольник (XPath)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 971x753 | 
    driver.manage().window().setSize(new Dimension(971, 753));
    // 3 | click | xpath=//*[@id="content"]/div[2]/form/table/tbody/tr[1]/td/input | 
    driver.findElement(By.xpath("//*[@id=\"content\"]/div[2]/form/table/tbody/tr[1]/td/input")).click();
    // 4 | type | name=vc | 0
    driver.findElement(By.name("vc")).clear();
    driver.findElement(By.name("vc")).sendKeys("0");
    // 5 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
    driver.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
    // 6 | type | name=vx | 3
    driver.findElement(By.name("vx")).clear();
    driver.findElement(By.name("vx")).sendKeys("3");
    // 7 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
    driver.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
    // 8 | type | name=vy | 3
    driver.findElement(By.name("vy")).clear();
    driver.findElement(By.name("vy")).sendKeys("3");
    // 9 | click | name=vz | 
    driver.findElement(By.name("vz")).click();
    // 10 | type | name=vz | 1
    driver.findElement(By.name("vz")).clear();
    driver.findElement(By.name("vz")).sendKeys("1");
    // 11 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 12 | assertText | xpath=//div[@id='content']/table/tbody/tr/td/p | Side a = 3\nSide b = 3\nSide c = 1
   
    assertEquals(driver.findElement(By.xpath("//div[@id='content']/table/tbody/tr/td/p")).getText(), "Side a = 3\nSide b = 3\nSide c = 1");
  } 

  @Test
  public void CSS6() {
    // Test name: Тупоугольный треугольник (CSS)
    // Step # | name | target | value
    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
    driver.get("https://www.calculator.net/triangle-calculator.html");
    // 2 | setWindowSize | 974x1031 | 
    driver.manage().window().setSize(new Dimension(974, 1031));
    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
    // 4 | type | name=vc | 178
    driver.findElement(By.name("vc")).clear();
    driver.findElement(By.name("vc")).sendKeys("178");
    // 5 | click | name=vx | 
    driver.findElement(By.name("vx")).click();
    // 6 | click | css=form:nth-child(1) tr:nth-child(2) | 
    driver.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
    // 7 | click | name=x | 
    driver.findElement(By.name("x")).click();
    // 8 | assertText | css=.bigtext:nth-child(3) | Angle ∠A = 1° = 0.017453 rad\nAngle ∠B = 1° = 0.017453 rad\nAngle ∠C = 178° = 3.10669 rad
    assertEquals(driver.findElement(By.cssSelector(".bigtext:nth-child(3)")).getText(), "Angle ∠A = 1° = 0.017453 rad\nAngle ∠B = 1° = 0.017453 rad\nAngle ∠C = 178° = 3.10669 rad");
  } 
}
