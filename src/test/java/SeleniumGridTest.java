// Generated by Selenium IDE
import org.junit.Test;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

@Execution(ExecutionMode.CONCURRENT)
@TestInstance(Lifecycle.PER_CLASS)
public class SeleniumGridTest {

	private WebDriver driver1, driver2;
	String nodeURL;
	Long id1, id2;
	  private Map<String, Object> vars;
	  JavascriptExecutor js;
	  @Before
	  public void setUp() throws MalformedURLException   {
		 
	   
		  ChromeOptions optChrome = new ChromeOptions();
		  EdgeOptions optEdge = new EdgeOptions();
		  nodeURL = "http://localhost:4444/";
		  optChrome.addArguments("--headless");
		  optEdge.addArguments("--headless=new");
		  driver1 = new RemoteWebDriver(new URL(nodeURL), optChrome);
		  driver2 = new RemoteWebDriver(new URL(nodeURL), optEdge);
	    
	  }
	  @After
	  public void tearDown() {
	    driver1.quit();
	    driver2.quit();
	  }
	  
	  @Test
	  public void ChromeСSS1() {
	    // Test name: Заполнено только одно поле для данных (CSS)
		  id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver1.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 4 | type | name=vx | 0
	    driver1.findElement(By.name("vx")).clear();
	    // driver.findElement(By.name("vx")).sendKeys("0");
	    // 5 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 6 | type | name=vc | 0
	    driver1.findElement(By.name("vc")).clear();
	    // driver.findElement(By.name("vc")).sendKeys("0");
	    // 7 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 8 | type | name=vy | 5
	    driver1.findElement(By.name("vy")).clear();
	    driver1.findElement(By.name("vy")).sendKeys("5");
	    // 9 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 10 | assertText | css=#content > p:nth-child(4) > font | Please provide 3 positive values, including at least one side.
	    assertEquals(driver1.findElement(By.cssSelector("#content > p:nth-child(4) > font")).getText(), "Please provide 3 positive values, including at least one side.");
	  } 
	   @Test
	  public void ChromeСSS2() {
	    // Test name: Равнобедренный треугольник (CSS)
		   id1=Thread.currentThread().getId();
			  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver1.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | type | name=vc | 0
	    driver1.findElement(By.name("vc")).clear();
	    // 5 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 6 | type | name=vx | 3
	    driver1.findElement(By.name("vx")).clear();
	    driver1.findElement(By.name("vx")).sendKeys("3");
	    // 7 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 8 | type | name=vy | 3
	    driver1.findElement(By.name("vy")).clear();
	    driver1.findElement(By.name("vy")).sendKeys("3");
	    // 9 | click | name=vz | 
	    driver1.findElement(By.name("vz")).click();
	    // 10 | type | name=vz | 1
	    driver1.findElement(By.name("vz")).sendKeys("1");
	    // 11 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 12 | assertText | css=.bigtext:nth-child(2) | Side a = 3\nSide b = 3\nSide c = 1
	    assertEquals(driver1.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 3\nSide b = 3\nSide c = 1");
	  } 
	 
	 @Test
	  public void ChromeCSS3() {
	    // Test name: Равносторонний треугольник (CSS)
		 id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | click | name=vc | 
	    driver1.findElement(By.name("vc")).click();
	    // 3 | type | name=vc | 0
	    driver1.findElement(By.name("vc")).clear();
	    driver1.findElement(By.name("vc")).sendKeys("0");
	    // 4 | click | name=vx | 
	    driver1.findElement(By.name("vx")).click();
	    // 5 | click | name=vy | 
	    driver1.findElement(By.name("vy")).click();
	    // 6 | click | name=vz | 
	    driver1.findElement(By.name("vz")).click();
	    // 7 | type | name=vz | 1
	    driver1.findElement(By.name("vz")).sendKeys("1");
	    // 8 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 9 | assertText | css=.bigtext:nth-child(2) | Side a = 1\nSide b = 1\nSide c = 1
	    assertEquals(driver1.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 1\nSide b = 1\nSide c = 1");
	  } 
	 
	  @Test
	  public void ChromeCSS4() {
	    // Test name: Заполнено 4 поля для данных (CSS)
		  id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver1.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 5 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 6 | click | name=vz | 
	    driver1.findElement(By.name("vz")).click();
	    // 7 | type | name=vz | 1
	    driver1.findElement(By.name("vz")).sendKeys("1");
	    // 8 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 9 | assertText | css=#content > p:nth-child(4) > font | Please provide three positive values only. You have 4 now.
	    assertEquals(driver1.findElement(By.cssSelector("#content > p:nth-child(4) > font")).getText(), "Please provide three positive values only. You have 4 now.");
	  } 
	  
	  @Test
	  public void ChromeXPath1() {
	    // Test name: Заполнено 4 поля для данных (XPath)
		  id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver1.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | xpath=//*[@id="content"]/div[2]/form/table/tbody/tr[1]/td/input | 
	    driver1.findElement(By.xpath("//*[@id=\"content\"]/div[2]/form/table/tbody/tr[1]/td/input")).click();
	    // 4 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver1.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 5 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver1.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 6 | click | name=vz | 
	    driver1.findElement(By.name("vz")).click();
	    // 7 | type | name=vz | 1
	    driver1.findElement(By.name("vz")).sendKeys("1");
	    // 8 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 9 | assertText | xpath=//*[@id="content"]/p[2]/font | Please provide three positive values only. You have 4 now.
	    assertEquals(driver1.findElement(By.xpath("//*[@id=\"content\"]/p[2]/font")).getText(), "Please provide three positive values only. You have 4 now.");
	  } 

	  @Test
	  public void ChromeCSS5() {
	    // Test name: Прямоугольный треугольник (CSS)
		  id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 974x1031 | 
	    driver1.manage().window().setSize(new Dimension(974, 1031));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 5 | type | name=vy | 0
	    driver1.findElement(By.name("vy")).clear();
	    driver1.findElement(By.name("vy")).sendKeys("0");
	    // 6 | click | name=vb | 
	    driver1.findElement(By.name("vb")).click();
	    // 7 | type | name=vb | 90
	    driver1.findElement(By.name("vb")).sendKeys("90");
	    // 8 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 9 | assertText | css=.bigtext:nth-child(2) | Side a = 0.5\nSide b = 1\nSide c = 0.86603 = √3/2
	    assertEquals(driver1.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 0.5\nSide b = 1\nSide c = 0.86603 = √3/2");
	  } 

	  @Test
	  public void ChromexPath2() {
	    // Test name: Равнобедренный треугольник (XPath)
		  id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver1.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | xpath=//*[@id="content"]/div[2]/form/table/tbody/tr[1]/td/input | 
	    driver1.findElement(By.xpath("//*[@id=\"content\"]/div[2]/form/table/tbody/tr[1]/td/input")).click();
	    // 4 | type | name=vc | 0
	    driver1.findElement(By.name("vc")).clear();
	    driver1.findElement(By.name("vc")).sendKeys("0");
	    // 5 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver1.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 6 | type | name=vx | 3
	    driver1.findElement(By.name("vx")).clear();
	    driver1.findElement(By.name("vx")).sendKeys("3");
	    // 7 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver1.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 8 | type | name=vy | 3
	    driver1.findElement(By.name("vy")).clear();
	    driver1.findElement(By.name("vy")).sendKeys("3");
	    // 9 | click | name=vz | 
	    driver1.findElement(By.name("vz")).click();
	    // 10 | type | name=vz | 1
	    driver1.findElement(By.name("vz")).clear();
	    driver1.findElement(By.name("vz")).sendKeys("1");
	    // 11 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 12 | assertText | xpath=//div[@id='content']/table/tbody/tr/td/p | Side a = 3\nSide b = 3\nSide c = 1
	   
	    assertEquals(driver1.findElement(By.xpath("//div[@id='content']/table/tbody/tr/td/p")).getText(), "Side a = 3\nSide b = 3\nSide c = 1");
	  } 

	  @Test
	  public void ChromeCSS6() {
	    // Test name: Тупоугольный треугольник (CSS)
		  id1=Thread.currentThread().getId();
		  System.out.println("Chrome id= " +id1);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver1.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 974x1031 | 
	    driver1.manage().window().setSize(new Dimension(974, 1031));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | type | name=vc | 178
	    driver1.findElement(By.name("vc")).clear();
	    driver1.findElement(By.name("vc")).sendKeys("178");
	    // 5 | click | name=vx | 
	    driver1.findElement(By.name("vx")).click();
	    // 6 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver1.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 7 | click | name=x | 
	    driver1.findElement(By.name("x")).click();
	    // 8 | assertText | css=.bigtext:nth-child(3) | Angle ∠A = 1° = 0.017453 rad\nAngle ∠B = 1° = 0.017453 rad\nAngle ∠C = 178° = 3.10669 rad
	    assertEquals(driver1.findElement(By.cssSelector(".bigtext:nth-child(3)")).getText(), "Angle ∠A = 1° = 0.017453 rad\nAngle ∠B = 1° = 0.017453 rad\nAngle ∠C = 178° = 3.10669 rad");
	  } 

	 @Test
	  public void EdgeСSS1() {
	    // Test name: Заполнено только одно поле для данных (CSS)
		 id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver2.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 4 | type | name=vx | 0
	    driver2.findElement(By.name("vx")).clear();
	    // driver.findElement(By.name("vx")).sendKeys("0");
	    // 5 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 6 | type | name=vc | 0
	    driver2.findElement(By.name("vc")).clear();
	    // driver.findElement(By.name("vc")).sendKeys("0");
	    // 7 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 8 | type | name=vy | 5
	    driver2.findElement(By.name("vy")).clear();
	    driver2.findElement(By.name("vy")).sendKeys("5");
	    // 9 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 10 | assertText | css=#content > p:nth-child(4) > font | Please provide 3 positive values, including at least one side.
	    assertEquals(driver2.findElement(By.cssSelector("#content > p:nth-child(4) > font")).getText(), "Please provide 3 positive values, including at least one side.");
	  } 
	   @Test
	  public void EdgeСSS2() {
	    // Test name: Равнобедренный треугольник (CSS)
		   id2=Thread.currentThread().getId();
			  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver2.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | type | name=vc | 0
	    driver2.findElement(By.name("vc")).clear();
	    // 5 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 6 | type | name=vx | 3
	    driver2.findElement(By.name("vx")).clear();
	    driver2.findElement(By.name("vx")).sendKeys("3");
	    // 7 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 8 | type | name=vy | 3
	    driver2.findElement(By.name("vy")).clear();
	    driver2.findElement(By.name("vy")).sendKeys("3");
	    // 9 | click | name=vz | 
	    driver2.findElement(By.name("vz")).click();
	    // 10 | type | name=vz | 1
	    driver2.findElement(By.name("vz")).sendKeys("1");
	    // 11 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 12 | assertText | css=.bigtext:nth-child(2) | Side a = 3\nSide b = 3\nSide c = 1
	    assertEquals(driver2.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 3\nSide b = 3\nSide c = 1");
	  } 
	 
	 @Test
	  public void EdgeCSS3() {
	    // Test name: Равносторонний треугольник (CSS)
		 id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | click | name=vc | 
	    driver2.findElement(By.name("vc")).click();
	    // 3 | type | name=vc | 0
	    driver2.findElement(By.name("vc")).clear();
	    driver2.findElement(By.name("vc")).sendKeys("0");
	    // 4 | click | name=vx | 
	    driver2.findElement(By.name("vx")).click();
	    // 5 | click | name=vy | 
	    driver2.findElement(By.name("vy")).click();
	    // 6 | click | name=vz | 
	    driver2.findElement(By.name("vz")).click();
	    // 7 | type | name=vz | 1
	    driver2.findElement(By.name("vz")).sendKeys("1");
	    // 8 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 9 | assertText | css=.bigtext:nth-child(2) | Side a = 1\nSide b = 1\nSide c = 1
	    assertEquals(driver2.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 1\nSide b = 1\nSide c = 1");
	  } 
	 
	  @Test
	  public void EdgeCSS4() {
	    // Test name: Заполнено 4 поля для данных (CSS)
		  id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver2.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 5 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 6 | click | name=vz | 
	    driver2.findElement(By.name("vz")).click();
	    // 7 | type | name=vz | 1
	    driver2.findElement(By.name("vz")).sendKeys("1");
	    // 8 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 9 | assertText | css=#content > p:nth-child(4) > font | Please provide three positive values only. You have 4 now.
	    assertEquals(driver2.findElement(By.cssSelector("#content > p:nth-child(4) > font")).getText(), "Please provide three positive values only. You have 4 now.");
	  } 
	  
	  @Test
	  public void EdgeXPath1() {
	    // Test name: Заполнено 4 поля для данных (XPath)
		  id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver2.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | xpath=//*[@id="content"]/div[2]/form/table/tbody/tr[1]/td/input | 
	    driver2.findElement(By.xpath("//*[@id=\"content\"]/div[2]/form/table/tbody/tr[1]/td/input")).click();
	    // 4 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver2.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 5 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver2.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 6 | click | name=vz | 
	    driver2.findElement(By.name("vz")).click();
	    // 7 | type | name=vz | 1
	    driver2.findElement(By.name("vz")).sendKeys("1");
	    // 8 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 9 | assertText | xpath=//*[@id="content"]/p[2]/font | Please provide three positive values only. You have 4 now.
	    assertEquals(driver2.findElement(By.xpath("//*[@id=\"content\"]/p[2]/font")).getText(), "Please provide three positive values only. You have 4 now.");
	  } 

	  @Test
	  public void EdgeCSS5() {
	    // Test name: Прямоугольный треугольник (CSS)
		  id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 974x1031 | 
	    driver2.manage().window().setSize(new Dimension(974, 1031));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 5 | type | name=vy | 0
	    driver2.findElement(By.name("vy")).clear();
	    driver2.findElement(By.name("vy")).sendKeys("0");
	    // 6 | click | name=vb | 
	    driver2.findElement(By.name("vb")).click();
	    // 7 | type | name=vb | 90
	    driver2.findElement(By.name("vb")).sendKeys("90");
	    // 8 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 9 | assertText | css=.bigtext:nth-child(2) | Side a = 0.5\nSide b = 1\nSide c = 0.86603 = √3/2
	    assertEquals(driver2.findElement(By.cssSelector(".bigtext:nth-child(2)")).getText(), "Side a = 0.5\nSide b = 1\nSide c = 0.86603 = √3/2");
	  } 

	  @Test
	  public void EdgexPath2() {
	    // Test name: Равнобедренный треугольник (XPath)
		  id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 971x753 | 
	    driver2.manage().window().setSize(new Dimension(971, 753));
	    // 3 | click | xpath=//*[@id="content"]/div[2]/form/table/tbody/tr[1]/td/input | 
	    driver2.findElement(By.xpath("//*[@id=\"content\"]/div[2]/form/table/tbody/tr[1]/td/input")).click();
	    // 4 | type | name=vc | 0
	    driver2.findElement(By.name("vc")).clear();
	    driver2.findElement(By.name("vc")).sendKeys("0");
	    // 5 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver2.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 6 | type | name=vx | 3
	    driver2.findElement(By.name("vx")).clear();
	    driver2.findElement(By.name("vx")).sendKeys("3");
	    // 7 | click | xpath=//div[@id='content']/div[2]/form/table/tbody/tr[2] | 
	    driver2.findElement(By.xpath("//div[@id=\'content\']/div[2]/form/table/tbody/tr[2]")).click();
	    // 8 | type | name=vy | 3
	    driver2.findElement(By.name("vy")).clear();
	    driver2.findElement(By.name("vy")).sendKeys("3");
	    // 9 | click | name=vz | 
	    driver2.findElement(By.name("vz")).click();
	    // 10 | type | name=vz | 1
	    driver2.findElement(By.name("vz")).clear();
	    driver2.findElement(By.name("vz")).sendKeys("1");
	    // 11 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 12 | assertText | xpath=//div[@id='content']/table/tbody/tr/td/p | Side a = 3\nSide b = 3\nSide c = 1
	   
	    assertEquals(driver2.findElement(By.xpath("//div[@id='content']/table/tbody/tr/td/p")).getText(), "Side a = 3\nSide b = 3\nSide c = 1");
	  } 

	  @Test
	  public void EdgeCSS6() {
	    // Test name: Тупоугольный треугольник (CSS)
		  id2=Thread.currentThread().getId();
		  System.out.println("Edge id= " +id2);
	    // Step # | name | target | value
	    // 1 | open | https://www.calculator.net/triangle-calculator.html | 
	    driver2.get("https://www.calculator.net/triangle-calculator.html");
	    // 2 | setWindowSize | 974x1031 | 
	    driver2.manage().window().setSize(new Dimension(974, 1031));
	    // 3 | click | css=form:nth-child(1) tr:nth-child(1) > td | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(1) > td")).click();
	    // 4 | type | name=vc | 178
	    driver2.findElement(By.name("vc")).clear();
	    driver2.findElement(By.name("vc")).sendKeys("178");
	    // 5 | click | name=vx | 
	    driver2.findElement(By.name("vx")).click();
	    // 6 | click | css=form:nth-child(1) tr:nth-child(2) | 
	    driver2.findElement(By.cssSelector("form:nth-child(1) tr:nth-child(2)")).click();
	    // 7 | click | name=x | 
	    driver2.findElement(By.name("x")).click();
	    // 8 | assertText | css=.bigtext:nth-child(3) | Angle ∠A = 1° = 0.017453 rad\nAngle ∠B = 1° = 0.017453 rad\nAngle ∠C = 178° = 3.10669 rad
	    assertEquals(driver2.findElement(By.cssSelector(".bigtext:nth-child(3)")).getText(), "Angle ∠A = 1° = 0.017453 rad\nAngle ∠B = 1° = 0.017453 rad\nAngle ∠C = 178° = 3.10669 rad");
	  } 
	
	  
}
